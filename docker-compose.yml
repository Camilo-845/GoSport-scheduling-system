services:
  postgres:
    image: postgres:13-alpine
    container_name: ${DB_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT_INTERNAL}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./DataBase/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./DataBase/dml.sql:/docker-entrypoint-initdb.d/02-dml.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  api:
    build: ./api/
    container_name: ${API_CONTAINER_NAME}
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT_INTERNAL}
      DB_HOST: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: ${API_PORT_INTERNAL}
    ports:
      - "${API_PORT_EXTERNAL}:${API_PORT_INTERNAL}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./api:/usr/src/app
      - /usr/src/app/build
      - /usr/src/app/node_modules
    networks:
      - app_network

  client:
    build: ./client/
    container_name: ${CLIENT_CONTAINER_NAME}
    ports:
      - "${CLIENT_PORT_EXTERNAL}:80"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
